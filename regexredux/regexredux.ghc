-- The Computer Language Benchmarks Game
-- https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
--
-- based on Daniel Jones' Julia implementation
-- contributed by Michal Stransky
-- requires: regex-pcre or regex-pcre-builtin,
--           parallel


import Data.List
import qualified Data.ByteString as B
import Text.Regex.PCRE
import Control.Parallel.Strategies

variants :: [String]
variants =
  [ "agggtaaa|tttaccct"
  , "[cgt]gggtaaa|tttaccc[acg]"
  , "a[act]ggtaaa|tttacc[agt]t"
  , "ag[act]gtaaa|tttac[agt]ct"
  , "agg[act]taaa|ttta[agt]cct"
  , "aggg[acg]aaa|ttt[cgt]ccct"
  , "agggt[cgt]aa|tt[acg]accct"
  , "agggta[cgt]a|t[acg]taccct"
  , "agggtaa[cgt]|[acg]ttaccct"]

subs :: [(B.ByteString, B.ByteString)]
subs =
  [ ("tHa[Nt]", "<4>")
  , ("aND|caN|Ha[DS]|WaS", "<3>")
  , ("a[NSt]|BY", "<2>")
  , ("<[^>]*>", "|")
  , ("\\|[^|][^|]*\\|", "-")]

main :: IO ()
main = do
  inseq <- B.getContents
  let l1 = B.length inseq
      sseq = B.filter (/=10) (gsub ">.*\n" inseq B.empty)
      l2 = B.length sseq
      cv = parMap rdeepseq (\t -> (t, sseq =~ t :: Int)) variants
      -- low hanging fruit parallelization 'map => parMap rdeepseq'
      resseq = foldl' (\s (ri,ro) -> gsub ri s ro) sseq subs
  mapM_ (\(t,c)-> putStrLn $ t ++ " " ++ show c) cv
  putStrLn ""
  print l1
  print l2
  print (B.length resseq)

-- Very simple Regex substitution
-- There is basically no acceptable regex substitution available for Haskell:
--   Package pcre-heavy provides 'gsub' which is hopelessly slow for this use.
--   Package pcre-utils provides substitute functions which can be used, but
--     they are slower than the following and have higher memory usage.
--   Package lens-regex-pcre provides lens interface, but it is based
--   on pcre-heavy..
--   Stack Overflow provides some discussions, and examples, so I ended up
--   rolling my own implementation.
gsub :: B.ByteString -> B.ByteString -> B.ByteString -> B.ByteString
gsub pat str rep = B.intercalate rep pcs where
  slen = B.length str
  (li',comp') = mapAccumR (\ li (s,l) -> (s,(s+l,li-s-l))) slen
                 (getAllMatches (str =~ pat))
  comp = (0,li'):comp'
  pcs = map (\(si,len)-> B.take len ((B.drop si) str)) comp

